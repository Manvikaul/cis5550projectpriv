fizkbidcbmdmvikcqqakxcqiiiqomavgcqdgaqzo page 84794 
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<link rel="icon" href="//staticg.sportskeeda.com/skm/assets/pfn/favicon.png" type="image/png" />
<link rel="icon" sizes="192x192" href="//staticg.sportskeeda.com/skm/assets/pfn/favicon.png" />
<link rel="shortcut" href="//staticg.sportskeeda.com/skm/assets/pfn/favicon.ico" type="image/x-icon" />
<link rel="shortcut icon" href="//staticg.sportskeeda.com/skm/assets/pfn/favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon-precomposed" href="//staticg.sportskeeda.com/skm/assets/pfn/favicon.png" sizes="196x196" />
<meta name="keywords" content="PFN Betting Odds Calculator" />
<meta name="description" content="Betting Odds Calculator: Calculate your potential winnings and expected returns with our user-friendly betting odds payout calculator." />
<meta name="robots" content="index, follow" />
<meta property="article:section" content="Betting Odds Calculator" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>Betting Odds Calculator: Convert Odds & Calculate Payouts</title>
<style>
*,
*::after,
*::before {
box-sizing: border-box;
}
body,
button,
input,
select {
font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Liberation Sans, sans-serif;
}
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
main,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
margin: 0;
padding: 0;
border: 0;
vertical-align: baseline;
}
iframe {
position: relative;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section {
display: block;
}
ol,
ul {
list-style: none;
}
q,
blockquote {
quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
content: "";
content: none;
}
a:hover,
a:active {
outline: none;
}
table {
border-collapse: collapse;
border-spacing: 0;
width: 100% !important;
}
html,
body {
width: 100%;
margin: 0;
padding: 0;
border: none;
position: relative;
}
.hidden {
display: none !important;
}
button {
cursor: pointer;
}
.sk-ads-video-player-container {
top: 100px;
position: relative;
}
</style>
<script>
var scriptsLoadedMap = {};
function asyncScriptLoader(input) {
var src = input.src;
var attachTo = input.attachTo;
var loadWithAsync = input.loadWithAsync;
var loadWithDefer = input.loadWithDefer;
var attributes = input.attributes || {};
var onUserInteraction = input.onUserInteraction || false;
if("id" in attributes) {
if(!!scriptsLoadedMap[attributes.id]) {
return Promise.resolve();
}
scriptsLoadedMap[attributes.id] = true;
}
return new Promise(function(resolve, reject) {
var script = document.createElement("script");
script.src = src;
script.onload = resolve;
script.onerror = reject;
if (loadWithAsync) {
script.setAttribute("async", true);
}
if (loadWithDefer) {
script.setAttribute("defer", true);
}
if (attributes && attributes.length > 0) {
attributes.forEach(function(attribute) {
script.setAttribute(attribute.key, attribute.value);
});
}
function loadScript() {
if (attachTo) {
attachTo.appendChild(script);
} else {
document.head.appendChild(script);
}
}
var scriptLoaded = false;
function loadScriptOnInteraction() {
if (scriptLoaded) return;
scriptLoaded = true;
/** Startegy to avoid main thread blocking with a timeout of 2s. To avoid high INP
* ref: https://web.dev/articles/optimize-long-tasks#manually_defer_code_execution
*/
if (typeof requestIdleCallback === "function") {
requestIdleCallback(loadScript, {
timeout: 2000,
});
} else {
loadScript();
}
document.removeEventListener("scroll", loadScriptOnInteraction);
document.removeEventListener("mousemove", loadScriptOnInteraction);
document.removeEventListener("touchmove", loadScriptOnInteraction);
}
if (onUserInteraction) {
document.addEventListener("scroll", loadScriptOnInteraction, { once: true, passive: true });
document.addEventListener("mousemove", loadScriptOnInteraction, { once: true, passive: true });
document.addEventListener("touchmove", loadScriptOnInteraction, { once: true, passive: true });
} else {
/** Startegy to avoid main thread blocking with a timeout of 2s. To avoid high INP
* ref: https://web.dev/articles/optimize-long-tasks#manually_defer_code_execution
*/
if (typeof requestIdleCallback === "function") {
requestIdleCallback(loadScript, {
timeout: 2000,
});
} else {
loadScript();
}
}
});
}
function loadCSSFiles(url, cssId) {
if(!!scriptsLoadedMap[cssId]) {
return;
}
scriptsLoadedMap[cssId] = true;
var head  = document.getElementsByTagName('head')[0];
var link  = document.createElement('link');
link.id   = cssId;
link.rel  = 'stylesheet';
link.type = 'text/css';
link.href = url;
link.media = 'all';
head.appendChild(link);
}
function createStyleTagWithContent(cssText, cssId) {
if(!!scriptsLoadedMap[cssId]) {
return;
}
scriptsLoadedMap[cssId] = true;
var style = document.createElement('style');
style.type = 'text/css';
if (style.styleSheet){
// This is required for IE8 and below.
style.styleSheet.cssText = cssText;
} else {
style.appendChild(document.createTextNode(cssText));
}
document.head.appendChild(style);
}
function deepCopy(o) {
var out, v, key;
out = Array.isArray(o) ? [] : {};
for (key in o) {
v = o[key];
out[key] = (typeof v === "object" && v !== null) ? deepCopy(v) : v;
}
return out;
}
</script>
<script>
var $ = document.querySelector.bind(document);
var $all = document.querySelectorAll.bind(document);
var $id = document.getElementById.bind(document);
function getCookie(cname) {
var name = cname + "=";
var ca = document.cookie.split(';');
for (var i = 0; i < ca.length; i++) {
var c = ca[i].trim();
if (c.indexOf(name) === 0) {
return c.substring(name.length, c.length).trim();
}
}
return "";
}
function pureJSAjaxGet(url, successCallback, errorCallback, credentials) {
var xmlHttp = new XMLHttpRequest();
xmlHttp.withCredentials = credentials;
xmlHttp.onreadystatechange = function() {
if (xmlHttp.readyState == XMLHttpRequest.DONE) {
if (xmlHttp.status == 200) {
successCallback(xmlHttp.responseText);
} else {
console.log('Error: ' + xmlHttp);
errorCallback(xmlHttp.statusText, xmlHttp.status);
}
}
};
xmlHttp.open("GET", url);
xmlHttp.send(null);
}
function pureJSAjaxGetWithPromise(url) {
return new Promise(function(resolve, reject) {
pureJSAjaxGet(url, function(res) {
resolve(res);
}, function(err) {
reject(err);
}, true);
})
}
function pureJSAjaxPostWithData(url, data, successCallBack, error_callback, withCredentials) {
var xmlhttp = new XMLHttpRequest();
if (withCredentials === true) xmlhttp.withCredentials = true;
xmlhttp.open("POST", url, true);
xmlhttp.setRequestHeader("Content-type", "application/json");
xmlhttp.onreadystatechange = function() {
if (xmlhttp.readyState == XMLHttpRequest.DONE) {
if (xmlhttp.status == 200) {
successCallBack(xmlhttp.responseText);
} else {
if (typeof(error_callback) !== "undefined") {
error_callback(xmlhttp.statusText, xmlhttp.status);
}
}
}
};
xmlhttp.send(data);
}
function addClass(ele, cls) {
if (!ele || !ele.classList) return;
return ele.classList.add(cls);
}
function removeClass(ele, cls) {
if (!ele || !ele.classList) return;
return ele.classList.remove(cls);
}
function hasClass(ele, cls) {
if (!ele || !ele.classList) return false;
return ele.classList.contains(cls);
}
var trackGAEvent = function() {
}
var getCurrentUserID = function() {
}
var getCookie = function() {
}
var setLocalStorageData = function(key, value) {
localStorage.setItem(key, value);
}
var getLocalStorageData = function(key) {
var item = localStorage.getItem(key);
return item != null ? item : "";
}
var notifyWhenInViewport = (function() {
var trackedElement = {};
var registeredCallbacks = {};
var firedTimers = {};
var SECONDS_TO_REMAIN_IN_VP = 1;
var observer = new IntersectionObserver(function(entries) {
entries.forEach(function(entry) {
if (!entry.target) return;
var identifier = entry.target.dataset["impId"];
if (!identifier) return;
if (!entry.isIntersecting || entry.intersectionRatio < 0.5) {
var timer = firedTimers[identifier];
if (timer) {
clearTimeout(timer);
trackedElement[identifier] = false;
}
return;
}
if (trackedElement[identifier]) return;
trackedElement[identifier] = true;
var callback = registeredCallbacks[identifier];
if (typeof callback == "function") {
firedTimers[identifier] = setTimeout(function() {
observer.unobserve(entry.target);
callback(entry.target);
}, SECONDS_TO_REMAIN_IN_VP * 1000);
}
});
}, {
threshold: 0.5
});
return function(element, identifier, callback) {
if (!element) return;
if (!identifier) return;
if (!callback) return;
if (trackedElement[identifier]) return;
element.setAttribute("data-imp-id", identifier);
registeredCallbacks[identifier] = callback;
observer.observe(element);
}
})();
var trackImpressionGAEventWhenInViewport = function(input) {
var element = input.element;
var identifier = input.identifier;
var eventName = input.eventName;
var eventParams = input.eventParams;
var delegateGAEvent = input.delegateGAEvent;
return notifyWhenInViewport(element, identifier, function() {
if (typeof delegateGAEvent == "function") {
delegateGAEvent(eventName, eventParams);
}
});
}
function getTimeDiffInDaysHoursMinutes(timeInMilliseconds) {
var diffDays = Math.floor(timeInMilliseconds / 86400000); // difference in days
var diffHrs = Math.floor((timeInMilliseconds % 86400000) / 3600000); // difference in hours
var diffMins = Math.round(((timeInMilliseconds % 86400000) % 3600000) / 60000); // difference in minutes
var result = [];
if (diffDays) {
if (diffDays == 1) {
result.push(diffDays + " day");
} else {
result.push(diffDays + " days");
}
}
if (diffHrs) {
result.push(diffHrs + "hr");
}
if (diffMins) {
result.push(diffMins + "min");
}
if (!result.length) {
result.push(Math.round(timeInMilliseconds / 1000) + "sec");
}
return result;
}
function debounce(func, duration) {
var timeout;
return function(...args) {
var effect = function effect() {
timeout = null;
return func.apply(this, args);
};
clearTimeout(timeout);
timeout = setTimeout(effect, duration);
};
}
function throttleFn(func, delay) {
var prev = 0;
return function() {
var context = this,
args = arguments;
let now = new Date().getTime();
if (now - prev > delay) {
prev = now;
return func.apply(context, args);
}
}
}
function getShortMonthNames() {
return ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
}
function getShortDayNames() {
return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
}
</script>
<script>
(function() {
window.adthrive = window.adthrive || {};
window.adthrive.cmd = window.adthrive.cmd || [];
window.adthrive.plugin = 'adthrive-ads-manual';
window.adthrive.host = 'ads.adthrive.com';
asyncScriptLoader({
src: 'https://ads.adthrive.com/sites/5e163f2211916d4860b8f332/ads.min.js?referrer=' + window
.encodeURIComponent(window.location.href) + '&cb=' + (Math.floor(Math.random() * 100) + 1),
onUserInteraction: true,
loadWithDefer: true,
});
})();
</script>
<script type="text/javascript">
window._taboola = window._taboola || [];
_taboola.push({
'article': 'auto'
});
! function(e, f, u, i) {
if (!document.getElementById(i)) {
e.async = 1;
e.src = u;
e.id = i;
f.parentNode.insertBefore(e, f);
}
}(document.createElement('script'),
document.getElementsByTagName('script')[0],
'//cdn.taboola.com/libtrc/profootballnetwork1-profootballnetwork/loader.js',
'tb_loader_script');
if (window.performance && typeof window.performance.mark == 'function') {
window.performance.mark('tbl_ic');
}
</script>
<script>
(function() {
window.clarity = window.clarity || function() {
window.clarity.q = window.clarity.q || [];
window.clarity.q.push(arguments);
}
window.clarity.q = window.clarity.q || [];
asyncScriptLoader({
src: "https://www.clarity.ms/tag/jd0t8qbgqn",
onUserInteraction: true,
loadWithDefer: true,
});
})();
</script>
</head>
<body class="odds-tool">
<main class="sk-proxied-page">
<style>
@font-face {
font-style: normal;
font-weight: normal;
font-family: "Roboto"; src: url("//staticg.sportskeeda.com/assets/fonts/roboto-regular-400.woff2") format("woff2");
font-display: swap;
}
@font-face {
font-style: normal;
font-weight: 500;
font-family: "Roboto"; src: url("//staticg.sportskeeda.com/assets/fonts/roboto-medium-500.woff2") format("woff2");
font-display: swap;
}
body,
button,
input,
select {
font-family: 'Roboto', -apple-system, BlinkMacSystemFont, Segoe UI, Liberation Sans, sans-serif;
}
.pfn-content-container .glossary-container {
--background: #F6F8FD;
--border-color: #0857C3;
--border-radius: 4px;
}
.pfn-content-container {
width: 100%;
display: flex;
gap: 20px;
justify-content: center;
align-items: flex-start;
margin-top: 145px;
}
.pfn-content-container .content {
display: flex;
flex-direction: column;
gap: 16px;
z-index: 2;
width: 720px;
}
.pfn-content-container .content.full-width {
width: 1110px;
}
.pfn-content-container .calculator-container .calculator-content {
border: 1px solid #0857C3;
background: #f5f9ff;
}
.pfn-content-container .right-sidebar-container {
width: 100%;
}
.pfn-content-container .right-sidebar-container .tool-widget-container {
padding: 20px 12px;
}
@media (min-width: 769px) {
.pfn-content-container .right-sidebar-container {
width: 360px;
border: 1px solid #E9E9E9;
}
.pfn-content-container .right-sidebar {
width: 360px;
min-height: 600px;
}
.pfn-content-container .ad-content {
display: none;
}
.pfn-nfl-shared .more-teams-list .more-team-body {
width: 650px;
}
}
.sticky-ad-container {
width: 100%;
height: 95px;
min-height: 55px;
position: fixed;
display: block;
bottom: 0;
z-index: 1;
}
.calculator-content,
.pfn-text-content-container {
border: 1px solid #E9E9E9;
padding: 20px;
}
.pfn-text-content-container p {
font-weight: 400;
font-size: 16px;
line-height: 27px;
color: #666666;
margin-top: 12px;
}
h2:not(:first-child) {
margin-top: 20px;
}
.pfn-content-container .parlay-calculator,
.pfn-content-container .odds-calculator,
.pfn-text-content-container {
width: 100%;
}
.pfn-content-container .calculator-container {
border: 1px solid #E9E9E9;
border-radius: unset;
background-color: #fff;
}
.pfn-content-container .calculator-content .calculator-input-group .calculator-input--label .calculator-input--label-text {
font-weight: 500;
line-height: 16px;
}
.pfn-content-container .calculator-content .calculator-input-group .calculator-input--field input {
border: 1px solid #D8E9FF;
line-height: 16px;
font-weight: 400;
}
.pfn-content-container .calculator-content .calculator-form--reset-button {
background: #0857C3;
font-weight: 500;
}
.pfn-content-container .calculator-content button.calculator-input--add-button {
border: 1px solid #0857C3;
color: #0857C3;
border-radius: 28px;
background: #E9F1FD;
line-height: 16px;
font-weight: 400;
}
.pfn-content-container .calculator-footer-content {
background: #fff;
}
.pfn-content-container .calculator-footer-content .calculator-input--field {
border: 1px solid #2D2D2D;
border-radius: 4px;
}
.pfn-text-content-container {
margin-bottom: 150px;
}
.pfn-text-content-container {
font-family: 'Roboto', -apple-system, BlinkMacSystemFont, Segoe UI, Liberation Sans, sans-serif;
}
.pfn-text-content-container h2 {
font-weight: 500;
font-size: 24px;
line-height: 29px;
margin-bottom: 10px;
}
.pfn-text-content-container h3 {
line-height: 29px;
margin-top: 10px;
}
.pfn-text-content-container ul {
padding-left: 20px;
list-style: disc;
}
.pfn-text-content-container ul li,
.pfn-text-content-container ol li {
margin-left: 20px;
font-weight: 400;
font-size: 16px;
line-height: 27px;
color: #666666;
}
.pfn-text-content-container ol li {
margin-left: 35px;
list-style-type: auto;
}
.pfn-text-content-container ul li ul {
list-style: circle;
}
.pfn-text-content-container h2 {
margin-bottom: 10px;
}
.pfn-nfl-shared .pfn-content-container {
margin-bottom: 104px;
}
.pfn-nfl-shared main div h1 {
color: #172B4D !important;
border-left: 4px solid #172B4D !important;
padding-left: 8px !important;
}
@media (max-width: 768px) {
.pfn-content-container {
padding: 12px;
margin-top: 95px;
margin-bottom: 100px;
width: 100%;
display: flex;
}
.pfn-nfl-shared .pfn-content-container {
margin-bottom: 16px;
padding: 0;
}
.content {
max-width: 412px;
}
.pfn-content-container .parlay-calculator,
.pfn-content-container .odds-calculator,
.pfn-content-container .content,
.pfn-text-content-container {
width: 100%;
}
.pfn-text-content-container .p {
font-size: 14px;
margin-top: 8px;
}
.pfn-text-content-container h2 {
font-weight: 600;
font-size: 18px;
line-height: 24px;
}
.pfn-text-content-container,
.pfn-content-container .calculator-container {
border: unset;
padding: unset;
}
.pfn-content-container .right-sidebar-container {
display: none;
}
.pfn-content-container .ad-content {
width: 100%;
text-align: center;
min-height: 250px;
}
.sticky-ad-container {
width: 100%;
height: 55px;
position: fixed;
display: block;
bottom: 0;
z-index: 1;
}
.more-teams-list .items-container {
height: 80vh !important;
padding-bottom: 80px;
}
.more-teams-list .items-container .more-team-head {
position: fixed;
width: 100%;
border-radius: 25px 25px 0 0;
background-color: white;
}
.more-teams-list .items-container .nfl-zone-title {
margin-top: 60px;
}
.pfn-content-container .top-text-content-container {
padding: 0 16px;
height: 116px;
overflow: hidden;
position: relative;
z-index: 2000;
background: #fff;
}
.pfn-content-container .top-text-content-container .read-more-content-btn,
.pfn-content-container .top-text-content-container .read-less-content-btn {
color: #0B65F0;
padding: 0;
border: unset;
background-color: #fff;
position: absolute;
bottom: 0;
right: 20px;
font-size: 16px;
font-weight: 400;
width: 88px;
}
.top-text-content-container .pfn-text-content-container {
margin-bottom: 0;
}
.top-text-content-container .pfn-text-content-container p {
font-size: 15px;
}
}
</style>
<style>
.pfn-header {
width: 100%;
background: #000;
position: fixed;
top: 0;
left: 0;
padding: 12px 0;
display: flex;
justify-content: center;
z-index: 100;
}
.pfn-header .h1-text-container {
display: flex;
flex-direction: column;
justify-content: center;
align-items: center;
}
.pfn-header .updated-timestamp-container {
color: #fff;
font-size: 14px;
font-weight: 600;
}
.pfn-header .header-content {
display: flex;
justify-content: center;
align-items: center;
gap: 12px;
}
.pfn-header .header-content .pfn-header-logo {
width: 116px;
height: 57px;
background: none;
}
.pfn-header .header-content .header-text {
font-weight: 700;
font-size: 25px;
line-height: 38px;
color: #fff;
}
@media (max-width: 768px) {
.pfn-header .header-content .pfn-header-logo {
width: 65px;
height: 32px;
}
.pfn-header .header-content .header-text {
font-weight: 700;
font-size: 14px;
line-height: 21px;
}
.pfn-header .header-content {
gap: 6px;
}
}
</style>
<div class="pfn-header">
<div class="header-content">
<a href="https://www.profootballnetwork.com" target="_blank">
<img class="pfn-header-logo" src="//staticg.sportskeeda.com/skm/assets/third-party/pfn-logo-full.png?h=114" width="116" height="57" alt="pfn-logo" />
</a>
<div class="h1-text-container">
<h1 class="header-text">Betting Odds Calculator</h1>
</div>
</div>
</div>
<style>
.header-tools-navigation {
width: 100%;
display: flex;
justify-content: center;
background: #FFFFFF;
z-index: 100;
position: fixed;
top: 81px;
box-shadow: 0px 4px 4px 0px rgb(0 0 0 / 5%);
}
.header-tools-navigation .header-tools-navigation-holder {
display: flex;
width: 1000px;
overflow-x: scroll;
text-wrap: nowrap;
}
.header-tools-navigation .header-tools-navigation-holder::-webkit-scrollbar {
display: none;
}
.header-tools-navigation .header-nav-btn {
font-size: 14px;
line-height: 21px;
font-weight: 500;
color: #666666;
padding: 10px 16px;
border-bottom: 4px;
text-decoration: none;
display: flex;
align-items: center;
white-space: nowrap;
}
.header-nav-btn .trending-icon {
opacity: 0.7;
}
.header-tools-navigation .header-nav-btn.selected {
border-bottom: 4px solid #000000;
}
.header-tools-navigation::-webkit-scrollbar {
display: none;
}
@media (max-width: 768px) {
.header-tools-navigation {
top: 56px;
justify-content: unset;
overflow-x: auto;
}
.header-tools-navigation .header-nav-btn {
white-space: nowrap;
}
.header-tools-navigation .header-nav-btn.selected {
border-bottom: 3px solid #000000;
}
}
</style>
<div class="header-tools-navigation">
<div class="header-tools-navigation-holder">
<a class="header-nav-btn" href="https://www.profootballnetwork.com/">PFN Home</a>
<a class="header-nav-btn " href="https://www.profootballnetwork.com/mockdraft">Mock Draft Simulator
<img class="trending-icon" src="//staticg.sportskeeda.com/skm/assets/third-party/trending-icon.gif" width="24" height="24" alt="treding-icon" />
</a>
<a class="header-nav-btn " href="https://www.profootballnetwork.com/nfl-draft">NFL Mock Drafts</a>
<a class="header-nav-btn " href="https://www.profootballnetwork.com/2024-nfl-draft-big-board/">Big Board</a>
<a class="header-nav-btn " href="https://www.profootballnetwork.com/fantasy-football-trade-analyzer">Trade Analyzer</a>
<a class="header-nav-btn " href="https://www.profootballnetwork.com/nfl-player-news-injuries-transactions-fantasy">NFL News Tracker</a>
<a class="header-nav-btn " href="https://www.profootballnetwork.com/nfl-playoff-predictor">Playoff Predictor</a>
<a class="header-nav-btn " href="https://www.profootballnetwork.com/who-should-i-start-fantasy-optimizer">Start/Sit Optimizer</a>
<a class="header-nav-btn " href="https://www.profootballnetwork.com/nfl-dfs-optimizer-lineup-generator">DFS Optimizer</a>
<a class="header-nav-btn " href="https://www.profootballnetwork.com/nfl-word-fumble-player-name-game">Wordle</a>
<a class="header-nav-btn selected" href="https://www.profootballnetwork.com/nfl-betting/betting-odds-calculator">Odds Calculator</a>
<a class="header-nav-btn " href="https://www.profootballnetwork.com/nfl-betting/parlays-calculator">Parlay Calculator</a>
</div>
</div>
<script>
(function() {
var primaryNavContainer = $(".header-tools-navigation-holder");
var primaryNavItems = primaryNavContainer.querySelectorAll("a");
for (var i = 0; i < primaryNavItems.length; i++) {
primaryNavItems[i].addEventListener("click", function(event) {
trackGAEvent("PFN_Navigation_Clicks", {
destinationUrl: event.target.href,
});
});
}
function scrollPrimaryNavigation() {
var xPosition = 0;
var paddingGap = -30;
var found = false;
for (var i = 1; i < primaryNavItems.length; i++) {
var previousItem = primaryNavItems[i - 1];
var currentItem = primaryNavItems[i];
xPosition += previousItem.scrollWidth + paddingGap;
xPosition = Math.max(xPosition, 0);
if (hasClass(currentItem, "selected")) {
found = true;
break;
}
}
if (!found) {
xPosition = 0;
}
primaryNavContainer.scrollBy({
behavior: "smooth",
top: 0,
left: xPosition
});
}
scrollPrimaryNavigation();
})();
</script>
<div class="pfn-content-container">
<div class="content ">
<script async src="https://www.googletagmanager.com/gtag/js?id=G-94BYBHMYCW"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag() {
dataLayer.push(arguments);
}
gtag("js", new Date());
gtag("config", "UA-131524109-1", { "send_page_view": false });
gtag("config", "G-94BYBHMYCW", { "send_page_view": false });
function trackGAEvent(eventName, eventParams) {
eventParams = eventParams || {};
var source = window.location.pathname + window.location.search;
var params = Object.assign({}, {
source_url: source,
source_title: document.title,
"send_to": "G-94BYBHMYCW",
}, eventParams);
var ga3Params = Object.assign({}, params, {
source_url: source,
source_title: document.title,
"send_to": "UA-131524109-1",
});
console.info("GTAG EVENT --> ", eventName, params);
gtag("event", eventName, params);
gtag("event", eventName, ga3Params);
}
</script>
<style>
.calculator-container {
background-color: #fff;
border: 1px solid #2d2d2d;
border-radius: 12px;
padding: 20px;
}
.calculator-container .calculator-content {
display: flex;
flex-direction: column;
}
.calculator-content .calculator-content--row {
display: flex;
margin-bottom: 15px;
width: 100%;
gap: 20px;
flex-direction: row;
align-items: flex-start;
justify-content: space-between;
}
.calculator-content .calculator-content--row.wrapped {
margin: 0 -10px 15px;
width: calc(100% + 20px);
gap: 20px 0;
justify-content: flex-start;
flex-wrap: wrap;
}
.calculator-content .calculator-content--row .calculator-content--column {
width: 100%;
display: flex;
flex-direction: column;
flex: 1;
}
.calculator-content .calculator-content--row.wrapped .calculator-content--column {
margin: 0 10px;
flex-grow: 0;
flex-shrink: 0;
flex-basis: calc(100% - 20px);
}
.calculator-content .calculator-content--row .calculator-content--column.d-100 {
flex-basis: calc(100% - 20px);
}
.calculator-content .calculator-content--row .calculator-content--column.d-50 {
flex-basis: calc(50% - 20px);
}
.calculator-content .calculator-content--row .calculator-content--column.d-33 {
flex-basis: calc(33.333333% - 20px);
}
.calculator-content .calculator-content--row .calculator-content--column.d-25 {
flex-basis: calc(25% - 20px);
}
.calculator-content .calculator-content--row .calculator-content--column#add_button_container {
align-self: flex-end;
}
.calculator-content .calculator-input-group {
display: flex;
gap: 2px;
flex-direction: column;
}
.calculator-content .calculator-input-group .calculator-input--label {
display: flex;
gap: 5px;
align-items: center;
position: relative;
margin-bottom: 4px;
}
.calculator-content .calculator-input-group .calculator-input--label .calculator-input--label-text {
color: #2D2D2D;
font-weight: 600;
font-size: 14px;
line-height: 21px;
}
.calculator-content .calculator-input-group .calculator-input--label-help-text-trigger {
cursor: pointer;
background-color: #fff;
border: 1px solid #999999;
border-radius: 50%;
width: 15px;
height: 15px;
padding: 3px;
position: relative;
}
.calculator-content .calculator-input-group .calculator-input--label-help-text-trigger::after {
content: "\2139";
color: #999;
font-size: 10px;
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
}
.calculator-content .calculator-input-group .calculator-input-help-text {
position: absolute;
bottom: 20px;
left: 0;
width: 100%;
padding: 2px 6px;
border-radius: 4px;
background: rgba(0, 0, 0, 0.7);
color: #fff;
font-weight: 400;
font-size: 12px;
line-height: 18px;
}
.calculator-content .calculator-input-group .calculator-input--remove {
cursor: pointer;
position: absolute;
right: 0;
background-color: transparent;
border: none;
padding: 0;
color: #999999;
font-size: 12px;
line-height: 18px;
}
.calculator-content .calculator-input-group .calculator-input--field {
display: flex;
}
.calculator-content .calculator-input-group .calculator-input--field input {
display: flex;
flex: 1;
width: 100%;
background: #FFFFFF;
color: #2D2D2D;
border: 1px solid #E2E2E2;
border-radius: 2px;
padding: 8px 6px;
outline: none;
font-size: 14px;
line-height: 21px;
}
.calculator-content .calculator-input-group .calculator-input--field input::-webkit-input-placeholder {
color: #aaa;
}
.calculator-content .calculator-input-group .calculator-input--error-message {
color: #D32F2F;
font-weight: 400;
font-size: 10px;
line-height: 15px;
display: none;
}
.calculator-content .calculator-input-group.has-error .calculator-input--error-message {
display: block;
}
.calculator-content .calculator-input-group.has-error .calculator-input--field input {
border-color: #D32F2F;
}
.calculator-content .calculator-input-group.has-success .calculator-input--field input {
border-color: #2E7D32;
}
.calculator-footer-content {
background: #F5F5F5;
border-radius: 8px;
padding: 20px;
display: flex;
gap: 20px;
flex-direction: row;
margin-top: 10px;
}
.calculator-footer-content .left-content {
display: flex;
gap: 15px;
align-items: center;
flex: 1;
}
.calculator-footer-content .right-content {
display: flex;
align-items: center;
flex: 1;
}
.calculator-footer-content .action-buttons {
display: flex;
width: 100%;
margin-top: 10px;
justify-content: flex-start;
}
.calculator-footer-content .right-content .action-buttons {
justify-content: flex-end;
}
.calculator-footer-content .calculator-footer-wrapper {
width: 100%;
display: flex;
flex-direction: column;
}
.calculator-content .calculator-form--reset-button {
cursor: pointer;
width: 100%;
border: none;
color: #fff;
background: #D32F2F;
border-radius: 74px;
padding: 10px 16px;
font-weight: 600;
font-size: 14px;
line-height: 16px;
max-width: 200px;
}
.calculator-content .calculator-form--reset-button.disabled {
background: #E2E2E2;
}
.calculator-content button.calculator-input--add-button {
cursor: pointer;
width: 100%;
border: 1px solid #37C77A;
color: #37C77A;
background: #E9F7F2;
border-radius: 2px;
padding: 8px 6px;
font-size: 14px;
line-height: 21px;
}
@media(max-width: 768px) {
.calculator-container {
padding: 16px 12px;
}
.calculator-content .calculator-content--row {
gap: 16px;
flex-direction: column;
}
.calculator-content .calculator-content--row:last-child {
margin-bottom: 0;
}
.calculator-content .calculator-content--row.wrapped {
margin: 0 -8px 10px;
width: calc(100% + 16px);
gap: 16px 0;
flex-direction: row;
}
.calculator-content .calculator-content--row.wrapped .calculator-content--column {
margin: 0 8px;
flex-basis: calc(100% - 16px);
}
.calculator-content .calculator-content--row .calculator-content--column.m-100 {
flex-basis: calc(100% - 16px);
}
.calculator-content .calculator-content--row .calculator-content--column.m-50 {
flex-basis: calc(50% - 16px);
}
.calculator-content .calculator-content--row .calculator-content--column.m-33 {
flex-basis: calc(33.333333% - 16px);
}
.calculator-content .calculator-content--row .calculator-content--column.m-25 {
flex-basis: calc(25% - 16px);
}
.calculator-footer-content {
gap: 6px;
flex-direction: column;
padding: 12px 8px 16px;
}
.calculator-footer-content .action-buttons {
padding-left: 0;
}
.calculator-content .calculator-form--reset-button {
max-width: 100%;
}
}
</style>
<style>
</style>
<div class="odds-calculator">
<form class="odds-calculator-form">
<div class="calculator-container">
<div class="calculator-content">
<div class="calculator-content--row">
<div class="calculator-content--column">
<div class="calculator-input-group">
<div class="calculator-input--label">
<div class="calculator-input--label-text">Bet Amount</div>
<button type="button" class="calculator-input--label-help-text-trigger"></button>
<div class="calculator-input-help-text hidden">
<span>Enter a value that you want to bet</span>
</div>
</div>
<div class="calculator-input--field">
<input type="text" placeholder="Eg. 100.00" class="calculator-input" id="input__bet_amount" data-input-key="bet_amount" tabindex="1" maxlength="10" />
</div>
<div class="calculator-input--error-message"></div>
</div>
</div>
<div class="calculator-content--column">
<div class="calculator-input-group">
<div class="calculator-input--label">
<div class="calculator-input--label-text">American Odds</div>
<button type="button" class="calculator-input--label-help-text-trigger"></button>
<div class="calculator-input-help-text hidden">
<span>American Odds are entered in hundreds and thousands (-160, +1300 etc)</span>
</div>
</div>
<div class="calculator-input--field">
<input type="text" placeholder="Eg. -100" class="calculator-input" id="input__american_odds" data-input-key="american_odds" tabindex="2" maxlength="6" />
</div>
<div class="calculator-input--error-message"></div>
</div>
</div>
</div>
<div class="calculator-content--row">
<div class="calculator-content--column">
<div class="calculator-input-group">
<div class="calculator-input--label">
<div class="calculator-input--label-text">Decimal Odds</div>
<button type="button" class="calculator-input--label-help-text-trigger"></button>
<div class="calculator-input-help-text hidden">
<span>Decimal odds are greater than 1, mostly with 2 decimal points (1.40, 2.45 etc)</span>
</div>
</div>
<div class="calculator-input--field">
<input type="text" placeholder="Eg. 100.00" class="calculator-input" id="input__decimal_odds" data-input-key="decimal_odds" tabindex="3" maxlength="10" />
</div>
<div class="calculator-input--error-message"></div>
</div>
</div>
<div class="calculator-content--column">
<div class="calculator-input-group">
<div class="calculator-input--label">
<div class="calculator-input--label-text">Fractional Odds</div>
<button type="button" class="calculator-input--label-help-text-trigger"></button>
<div class="calculator-input-help-text hidden">
<span>Fractional odds are entered as a fraction of a number (3/7, 1/3 etc)</span>
</div>
</div>
<div class="calculator-input--field">
<input type="text" placeholder="Eg. 5/2" class="calculator-input" id="input__fractional_odds" data-input-key="fractional_odds" tabindex="4" maxlength="10" />
</div>
<div class="calculator-input--error-message"></div>
</div>
</div>
</div>
<div class="calculator-content--row wrapped">
<div class="calculator-content--column d-50 m-100">
<div class="calculator-input-group">
<div class="calculator-input--label">
<div class="calculator-input--label-text">Implied Probability (%)</div>
<button type="button" class="calculator-input--label-help-text-trigger"></button>
<div class="calculator-input-help-text hidden">
<span>Implied Probability is entered as a percentage (40%, 70% etc)</span>
</div>
</div>
<div class="calculator-input--field">
<input type="text" placeholder="Eg. 58.13" class="calculator-input" id="input__implied_odds" data-input-key="implied_odds" tabindex="5" maxlength="6" />
</div>
<div class="calculator-input--error-message"></div>
</div>
</div>
</div>
<footer>
<div class="calculator-footer-content">
<div class="left-content">
<div class="calculator-content--row wrapped">
<div class="calculator-content--column d-50 m-50">
<div class="calculator-input-group">
<div class="calculator-input--label">
<div class="calculator-input--label-text">Winnings</div>
</div>
<div class="calculator-input--field">
<input type="text" placeholder="$90.01" class="calculator-output--winnings" readonly id="output__winnings" />
</div>
</div>
</div>
<div class="calculator-content--column d-50 m-50">
<div class="calculator-input-group">
<div class="calculator-input--label">
<div class="calculator-input--label-text">Payout</div>
</div>
<div class="calculator-input--field">
<input type="text" placeholder="$190.01" class="calculator-output--payout" readonly id="output__payout" />
</div>
</div>
</div>
</div>
</div>
<div class="right-content">
<div class="action-buttons">
<button type="reset" class="calculator-form--reset-button">Reset</button>
</div>
</div>
</div>
</footer>
</div>
</div>
</form>
</div>
<script async src="https://staticg.sportskeeda.com/third-party/fraction/4.2.0/fraction.min.js"></script>
<script>
function debounce(func, duration) {
var timeout;
return function(...args) {
var effect = function effect() {
timeout = null;
return func.apply(this, args);
};
clearTimeout(timeout);
timeout = setTimeout(effect, duration);
};
}
function roundOffTo(input, decimalDigits) {
decimalDigits = decimalDigits || 0;
var epsilonComponents = ["e", decimalDigits];
return +(Math.round(input + epsilonComponents.join("+")) + epsilonComponents.join("-"));
}
function roundOffToFloor(input) {
var positiveValue = Math.abs(input);
var roundedOffValue = Math.round(positiveValue);
if (input < 0) {
return -1 * roundedOffValue;
}
return roundedOffValue;
}
function withPositiveSymbol(value) {
var textValue = String(value);
if (value > 0 && textValue.indexOf("+") != 0) {
return "+" + textValue;
}
return value;
}
function createFraction(number) {
return new Fraction(number);
}
</script>
<script>
function OddsCalculatorField(id, fieldKey, inputNode, errorMessages) {
this.id = id;
this.fieldKey = fieldKey;
this.inputNode = inputNode;
this.currentValue = 0;
this.previousValue = 0;
this.currentDOMValue = "";
this.previousDOMValue = "";
this.errorMessages = errorMessages;
this.inputGroupNode = inputNode.parentElement.parentElement;
this.inputColumnNode = this.inputGroupNode.parentElement;
this.errorMessageNode = this.inputGroupNode.querySelector(".calculator-input--error-message");
}
OddsCalculatorField.prototype.showError = function(errorCode) {
var errorMessage = this.errorMessages[errorCode];
if (!errorMessage) {
return;
}
this.inputGroupNode.classList.remove("has-success");
this.inputGroupNode.classList.add("has-error");
this.errorMessageNode.innerText = errorMessage;
}
OddsCalculatorField.prototype.showSuccess = function() {
this.inputGroupNode.classList.add("has-success");
this.inputGroupNode.classList.remove("has-error");
this.errorMessageNode.innerText = "";
}
OddsCalculatorField.prototype.makePristine = function() {
this.inputGroupNode.classList.remove("has-success");
this.inputGroupNode.classList.remove("has-error");
this.errorMessageNode.innerText = "";
}
OddsCalculatorField.prototype.focus = function() {
this.inputNode.focus();
}
OddsCalculatorField.prototype.reset = function() {
this.currentValue = 0;
this.currentDOMValue = "";
this.makePristine();
}
Object.defineProperty(OddsCalculatorField.prototype, "previousValue", {
get() {
return this._previousValue;
},
set(newValue) {
this._previousValue = newValue;
}
});
Object.defineProperty(OddsCalculatorField.prototype, "currentValue", {
get() {
return this._currentValue;
},
set(newValue) {
this.previousValue = this._currentValue;
this._currentValue = newValue;
}
});
Object.defineProperty(OddsCalculatorField.prototype, "previousDOMValue", {
get() {
return this._previousDOMValue;
},
set(newValue) {
this._previousDOMValue = newValue;
}
});
Object.defineProperty(OddsCalculatorField.prototype, "currentDOMValue", {
get() {
return this._currentDOMValue;
},
set(newValue) {
this.previousDOMValue = this._currentDOMValue;
this._currentDOMValue = newValue;
this.inputNode.value = newValue;
}
});
</script>
<script>
var convertOdds = {
american: {
decimal: function(input) {
var positiveInput = Math.abs(input);
if (input < 0) {
return (positiveInput + 100) / positiveInput;
}
return (positiveInput + 100) / 100;
},
fractional: function(input) {
var positiveInput = Math.abs(input);
var fractionalResult = createFraction(positiveInput / 100);
if (input < 0) {
return [fractionalResult.d, fractionalResult.n].join("/");
}
return [fractionalResult.n, fractionalResult.d].join("/");
},
implied: function(input) {
var positiveInput = Math.abs(input);
if (input < 0) {
return (positiveInput / (positiveInput + 100)) * 100;
}
return (100 / (positiveInput + 100)) * 100;
}
},
decimal: {
american: function(input) {
var positiveInput = Math.abs(input);
if (input < 2) {
return "-" + (100 / (positiveInput - 1));
}
return (positiveInput - 1) * 100;
},
fractional: function(input) {
var positiveInput = Math.abs(input);
var fractionalResult = createFraction(positiveInput - 1);
if (input < 0) {
return [fractionalResult.d, fractionalResult.n].join("/");
}
return [fractionalResult.n, fractionalResult.d].join("/");
},
implied: function(input) {
var positiveInput = Math.abs(input);
return 100 / positiveInput;
}
},
fractional: {
american: function(numerator, denominator) {
if (numerator > denominator) {
return 100 * (numerator / denominator);
}
return "-" + 100 * (denominator / numerator);
},
decimal: function(numerator, denominator) {
return (numerator / denominator) + 1;
},
implied: function(numerator, denominator) {
return (100 - (100 * numerator) / (numerator + denominator));
}
},
implied: {
american: function(input) {
var positiveInput = Math.abs(input);
if (input < 50) {
return (100 * (100 / positiveInput)) - 100;
}
return -(100 * positiveInput) / (100 - positiveInput);
},
decimal: function(input) {
var positiveInput = Math.abs(input);
return (100 / positiveInput);
},
fractional: function(input) {
var positiveInput = Math.abs(input);
var fractionalResult = createFraction((100 - positiveInput) / positiveInput);
if (input < 0) {
return [fractionalResult.d, fractionalResult.n].join("/");
}
return [fractionalResult.n, fractionalResult.d].join("/");
}
}
}
</script>
<script>
var trackGAEventForPage = function(eventName, eventParams) {
eventParams = eventParams || {};
trackGAEvent(eventName, {
...eventParams,
"tool": "betting_odds_calculator"
});
};
(function() {
trackGAEventForPage("page_view");
})();
(function() {
var form = $(".odds-calculator-form");
var allHelperTextTriggerButtons = $all(".calculator-input--label-help-text-trigger");
var inputBetAmount = $("#input__bet_amount");
var inputAmericanOdds = $("#input__american_odds");
var inputDecimalOdds = $("#input__decimal_odds");
var inputFractionalOdds = $("#input__fractional_odds");
var inputImpliedOdds = $("#input__implied_odds");
var outputWinnings = $("#output__winnings");
var outputPayout = $("#output__payout");
var allInputFields = [
inputBetAmount,
inputAmericanOdds,
inputDecimalOdds,
inputFractionalOdds,
inputImpliedOdds
];
var calculatorFieldsByKey = {};
var calculatorParams = {
betAmount: 0,
americanOdds: 0,
decimalOdds: 0,
fractionalOdds: 0,
impliedOdds: 0,
betAmountPrevious: 0,
americanOddsPrevious: 0,
decimalOddsPrevious: 0,
fractionalOddsPrevious: 0,
impliedOddsPrevious: 0,
get betAmountDom() {
return inputBetAmount.value;
},
set betAmountDom(value) {
calculatorParams.betAmountPrevious = calculatorParams.betAmountDom;
inputBetAmount.value = value;
},
get americanOddsDom() {
return inputAmericanOdds.value;
},
set americanOddsDom(value) {
calculatorParams.americanOddsPrevious = calculatorParams.americanOddsDom;
inputAmericanOdds.value = value;
},
get decimalOddsDom() {
return inputDecimalOdds.value;
},
set decimalOddsDom(value) {
calculatorParams.decimalOddsPrevious = calculatorParams.decimalOddsDom;
inputDecimalOdds.value = value;
},
get fractionalOddsDom() {
return inputFractionalOdds.value;
},
set fractionalOddsDom(value) {
calculatorParams.fractionalOddsPrevious = calculatorParams.fractionalOddsDom;
inputFractionalOdds.value = value;
},
get impliedOddsDom() {
return inputImpliedOdds.value;
},
set impliedOddsDom(value) {
calculatorParams.impliedOddsPrevious = calculatorParams.impliedOddsDom;
inputImpliedOdds.value = value;
},
get winningsDom() {
return outputWinnings.value;
},
set winningsDom(value) {
outputWinnings.value = value;
},
get payoutDom() {
return outputPayout.value;
},
set payoutDom(value) {
outputPayout.value = value;
}
}
function resetBetAmount() {
calculatorParams.betAmount = 0;
calculatorParams.betAmountDom = "";
calculatorFieldsByKey["bet_amount"].makePristine();
}
function resetParams() {
calculatorParams.americanOdds = 0;
calculatorParams.americanOddsDom = "";
calculatorParams.decimalOdds = 0;
calculatorParams.decimalOddsDom = "";
calculatorParams.fractionalOdds = 0;
calculatorParams.fractionalOddsDom = "";
calculatorParams.impliedOdds = 0;
calculatorParams.impliedOddsDom = "";
resetInputFieldsState();
resetOutputFields();
}
function resetInputFieldsState() {
for (var key in calculatorFieldsByKey) {
if (key == "bet_amount") continue;
calculatorFieldsByKey[key].makePristine();
}
}
function resetOutputFields() {
calculatorParams.winningsDom = "";
calculatorParams.payoutDom = "";
}
function calculateAndShowResult() {
var wager = calculatorParams.betAmount || 0;
if (!wager) {
calculatorFieldsByKey["bet_amount"].showError("MISSING_VALUE");
}
if (Number.isNaN(Number(wager))) {
return resetOutputFields();
}
var decimalOdds = calculatorParams.decimalOdds;
if (!decimalOdds) {
return;
}
var winnings = roundOffTo((decimalOdds * wager) - wager, 2);
var payout = roundOffTo((decimalOdds * wager), 2);
calculatorParams.winningsDom = winnings.toFixed(2);
calculatorParams.payoutDom = payout.toFixed(2);
}
var errorMessages = {
bet_amount: {
NOT_VALID: "Invalid Bet Amount",
MISSING_VALUE: "Enter your Bet Amount to know the Winnings and Payout"
},
american_odds: {
NOT_VALID: "Invalid Odds",
OUT_OF_BOUNDS: "Enter a value which is greater than +100 or lesser than -100",
HAS_DECIMAL: "The American Odds are ideally represented without decimals"
},
decimal_odds: {
NOT_VALID: "Invalid Odds",
OUT_OF_BOUNDS: "Enter a value which is greater than 1"
},
fractional_odds: {
NOT_VALID: "Invalid Odds",
OUT_OF_BOUNDS: "Enter at least 2 values separated by a (/)"
},
implied_odds: {
NOT_VALID: "Invalid Odds",
OUT_OF_BOUNDS: "Enter a value between 1 to 100"
}
};
var handlers = {
bet_amount: function(textValue, calculatorField) {
if (calculatorParams.betAmountPrevious == textValue) {
return;
}
calculatorParams.betAmountPrevious = calculatorParams.betAmountDom;
var numericValue = Number(textValue);
if (Number.isNaN(numericValue)) {
return calculatorField.showError("NOT_VALID");
}
if (numericValue < 0 || numericValue > 9999999.99) {
return calculatorField.showError("NOT_VALID");
}
calculatorField.showSuccess();
calculatorParams.betAmount = numericValue;
calculateAndShowResult();
},
american_odds: function(textValue, calculatorField) {
if (calculatorParams.americanOddsPrevious == textValue) {
return;
}
calculatorParams.americanOddsPrevious = calculatorParams.americanOddsDom;
var numericValue = Number(textValue);
if (Number.isNaN(numericValue)) {
return calculatorField.showError("NOT_VALID");
}
if (numericValue < 100 && numericValue > -100) {
return calculatorField.showError("OUT_OF_BOUNDS");
}
if (textValue.indexOf(".") > -1) {
calculatorField.showError("HAS_DECIMAL");
} else {
calculatorField.showSuccess();
}
calculatorParams.americanOdds = numericValue;
calculatorParams.americanOddsDom = withPositiveSymbol(numericValue);
var decimalValue = convertOdds.american.decimal(numericValue);
calculatorParams.decimalOdds = decimalValue;
calculatorParams.decimalOddsDom = parseFloat(decimalValue).toFixed(2);
var fractionalValue = convertOdds.american.fractional(numericValue);
calculatorParams.fractionalOdds = fractionalValue;
calculatorParams.fractionalOddsDom = fractionalValue;
var impliedValue = convertOdds.american.implied(numericValue);
calculatorParams.impliedOdds = impliedValue;
calculatorParams.impliedOddsDom = roundOffTo(impliedValue, 2);
calculateAndShowResult();
},
decimal_odds: function(textValue, calculatorField) {
if (calculatorParams.decimalOddsPrevious == textValue) {
return;
}
calculatorParams.decimalOddsPrevious = calculatorParams.decimalOddsDom;
var numericValue = Number(textValue);
if (Number.isNaN(numericValue)) {
return calculatorField.showError("NOT_VALID");
}
if (numericValue <= 1) {
return calculatorField.showError("OUT_OF_BOUNDS");
}
calculatorField.showSuccess();
calculatorParams.decimalOdds = numericValue;
var americanValue = convertOdds.decimal.american(roundOffTo(numericValue, 2));
calculatorParams.americanOdds = americanValue;
calculatorParams.americanOddsDom = withPositiveSymbol(roundOffToFloor(americanValue));
var fractionalValue = convertOdds.decimal.fractional(numericValue);
calculatorParams.fractionalOdds = fractionalValue;
calculatorParams.fractionalOddsDom = fractionalValue;
var impliedValue = convertOdds.decimal.implied(numericValue);
calculatorParams.impliedOdds = impliedValue;
calculatorParams.impliedOddsDom = roundOffTo(impliedValue, 2);
calculateAndShowResult();
},
fractional_odds: function(textValue, calculatorField) {
if (calculatorParams.fractionalOddsPrevious == textValue) {
return;
}
calculatorParams.fractionalOddsPrevious = calculatorParams.fractionalOddsDom;
var matches = textValue.match(/\//gi);
if (matches && matches.length > 1) {
return calculatorField.showError("NOT_VALID");
}
var fractionComponents = textValue.split("/").filter(Boolean);
if (fractionComponents.length != 2) {
return calculatorField.showError("OUT_OF_BOUNDS");
}
var numerator = Number(fractionComponents[0]);
var denominator = Number(fractionComponents[1]);
if (Number.isNaN(numerator) || Number.isNaN(denominator)) {
return calculatorField.showError("NOT_VALID");
}
if (numerator <= 0 || denominator <= 0) {
return calculatorField.showError("NOT_VALID");
}
calculatorField.showSuccess();
var numericValue = numerator / denominator;
calculatorParams.fractionalOdds = numericValue;
var americanValue = convertOdds.fractional.american(numerator, denominator);
calculatorParams.americanOdds = americanValue;
calculatorParams.americanOddsDom = withPositiveSymbol(roundOffToFloor(americanValue));
var decimalValue = convertOdds.fractional.decimal(numerator, denominator);
calculatorParams.decimalOdds = decimalValue;
calculatorParams.decimalOddsDom = parseFloat(decimalValue).toFixed(2);
var impliedValue = convertOdds.fractional.implied(numerator, denominator);
calculatorParams.impliedOdds = impliedValue;
calculatorParams.impliedOddsDom = roundOffTo(impliedValue, 2);
calculateAndShowResult();
},
implied_odds: function(textValue, calculatorField) {
if (calculatorParams.impliedOddsPrevious == textValue) {
return;
}
calculatorParams.impliedOddsPrevious = calculatorParams.impliedOddsDom;
var numericValue = Number(textValue);
if (Number.isNaN(numericValue)) {
return calculatorField.showError("NOT_VALID");
}
if (numericValue < 1 || numericValue > 100) {
return calculatorField.showError("OUT_OF_BOUNDS");
}
calculatorField.showSuccess();
calculatorParams.impliedOdds = numericValue;
var americanValue = convertOdds.implied.american(numericValue);
calculatorParams.americanOdds = americanValue;
calculatorParams.americanOddsDom = withPositiveSymbol(roundOffToFloor(americanValue));
var decimalValue = convertOdds.implied.decimal(numericValue);
calculatorParams.decimalOdds = decimalValue;
calculatorParams.decimalOddsDom = parseFloat(decimalValue).toFixed(2);
var fractionalValue = convertOdds.implied.fractional(numericValue);
calculatorParams.fractionalOdds = fractionalValue;
calculatorParams.fractionalOddsDom = fractionalValue;
calculateAndShowResult();
}
}
function initForm() {
form.addEventListener("reset", function() {
resetBetAmount();
resetParams();
});
}
function initInputFields() {
var generateHandler = function(calculatorField, handlerDelegate) {
return function(e) {
var textValue = e.target.value;
if (textValue == "") {
if (calculatorField.fieldKey === "bet_amount") {
resetBetAmount();
resetOutputFields();
} else {
resetParams();
calculatorFieldsByKey["bet_amount"].makePristine();
}
return calculatorField.makePristine();
}
handlerDelegate(textValue, calculatorField);
}
}
allInputFields.forEach(function(input) {
var id = input.getAttribute("id");
var inputKey = input.dataset["inputKey"];
var calculatorField = new OddsCalculatorField(id, inputKey, input, errorMessages[inputKey]);
calculatorFieldsByKey[inputKey] = calculatorField;
var handler = handlers[inputKey];
if (handler) {
var finalHandler = generateHandler(calculatorField, handler);
input.addEventListener("keyup", debounce(finalHandler, 100));
input.addEventListener("change", debounce(finalHandler, 200));
}
});
}
function initHelperTextTriggerButtons() {
var handlerGenerator = function(target, callback) {
if (!target.parentElement) {
return;
}
var helperNode = target.parentElement.querySelector(".calculator-input-help-text");
if (!helperNode) {
return;
}
return function(state) {
if (state == "ON") {
helperNode.classList.remove("hidden");
} else if (state == "OFF") {
helperNode.classList.add("hidden");
}
}
}
allHelperTextTriggerButtons.forEach(function(button) {
var handler = handlerGenerator(button);
if (handler) {
button.addEventListener("mouseenter", function() {
handler("ON");
});
button.addEventListener("mouseleave", function() {
handler("OFF");
});
}
});
}
function init() {
initForm();
initInputFields();
initHelperTextTriggerButtons();
}
init();
})();
</script>
<div class="ad-content"></div>
<div class="pfn-text-content-container">
<h2>What Are Betting Odds?</h2>
<p>Betting odds are set by oddsmakers at each of the sportsbooks, and they reflect their opinion on the probability of a particular game, event, or other proposition. When one side has shorter odds than the other, that means the sportsbook sees that side being more likely to win (or that proposition having a greater chance of happening than the other). The greater the odds, the greater the payout for the customer. Another factor in setting these odds is liability, as the goal for oddsmakers is to mitigate risk and have as close to balanced action on each side as possible.</p>
<h2>How To Read Betting Odds</h2>
<p>Reading and understanding betting odds can oftentimes be confusing to beginners. There are a variety of ways that betting odds can be presented, but here in the United States, you’ll always see “American Odds.” The odds will appear in the form of hundreds, and they’ll either have a minus or plus sign in front of them. The difference between the plus or minus sign is to distinguish the favorite or underdog to win outright in a given match, and for a proposition, the minus sign would indicate an “odds-on favorite,” meaning the most likely scenario.</p>
<p>When betting on football, there are three different forms of betting markets you’ll see: the point spread, the moneyline, and the total.</p>
<p><strong>Moneyline</strong>: Betting on the moneyline means you’re wagering on which side you think is going to win. Let’s use Super Bowl 57 as an example. The Eagles were -125 and the Chiefs were +100. The Chiefs ended up winning the Super Bowl, and anyone that bet the Chiefs outright would receive a payout of 1:1, as indicated by the +100 odds, a $100 bet profiting $100.</p>
<p><strong>Point spread</strong>: Rather than betting on either side to win or lose, you’re betting on the margin of victory for a given matchup. In order to win your bet on the favorite, they’ll have to win by more than that amount of points. And to win your bet on the underdog, they just can’t lose by at least that amount of points. If you bet on the favorite’s point spread and they win by that exact number of points, your bet will “push,” meaning you get your money back but you don’t win or lose. The same goes if you bet the underdog and they lose by that exact number.</p>
<p>When betting the point spread, there will always be odds next to each side, which would indicate your payout for each. There is usually a small disparity in payout between both sides on the point spread, and typically start out at -110 on each side, meaning, you would have to stake $110 to profit $100. As a reminder, the favorite will have a minus sign in front of their point spread and the underdog will have a plus sign.</p>
<p><strong>Total</strong>: This represents the combined amount of points scored by both teams in a given matchup, and when betting on the total, you’ll either be wagering on the “over” or the “under.” When betting on the over, that means you’re expecting there to be more points scored than the total, and to bet the under means you’re expecting less. Like with the point spread, there will be moneyline odds on each side, typically starting at -110. </p>
<h2>Why Are Odds Important?</h2>
<p>Odds are important because they provide the calculation of potential payouts and they indicate the probability of an event or outcome. The shorter the odds, the greater the likelihood but less of a payout. The greater the odds, it’s less likely to occur, but the payout is larger.</p>
<h2>How To Use Odds in Your Favor</h2>
<p>Anyone that lives in a legal betting state will have a variety of sportsbooks to choose from, and it’s important to take advantage. The reason is that the odds may not be uniform across these different sportsbooks, meaning you should always “shop around” for the best odds possible. For example, if you like a team to win the Super Bowl, you should look at their odds at each of the sportsbooks and place your wager with the one that gives you the longest odds and the best payout.</p>
<h2>What Is Arbitrage Betting?</h2>
<p>Arbitrage betting is when you guarantee yourself profit, or at the very worst, break even on your bets by wagering on both sides of a market when presented the opportunity to take advantage of the odds.</p>
<p>Say, for example, you bet $100 on a +120 underdog for a potential profit of $120. Then, at another sportsbook, the odds for the favorite are shorter at -105, so you wager $105 to win $100. Now, you’ll be guaranteed either a profit of $15, or to break even in the worst-case scenario, as opposed to potentially losing $100 on the underdog.</p>
</div>
</div>
<div class="right-sidebar-container">
<div class="right-sidebar"></div>
</div>
<div class="sticky-ad-container">
</div>
</div>
<script>
var _rollbarConfig = {
accessToken: "3dc8cbbe48364298bf4296c34daed8d5",
captureUncaught: true,
captureUnhandledRejections: true,
ignoredMessages: [
"ResizeObserver loop limit exceeded", 
"Script error", 
"object Event",
"The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission.",
"The operation was aborted.",
],
payload: {
environment: "production",
person: {
id: getCurrentUserID(),
username: getCookie("fw_user_slug")
}
},
};
// Rollbar Snippet
!function(r){var e={};function o(n){if(e[n])return e[n].exports;var t=e[n]={i:n,l:!1,exports:{}};return r[n].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.m=r,o.c=e,o.d=function(r,e,n){o.o(r,e)||Object.defineProperty(r,e,{enumerable:!0,get:n})},o.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},o.t=function(r,e){if(1&e&&(r=o(r)),8&e)return r;if(4&e&&"object"==typeof r&&r&&r.__esModule)return r;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:r}),2&e&&"string"!=typeof r)for(var t in r)o.d(n,t,function(e){return r[e]}.bind(null,t));return n},o.n=function(r){var e=r&&r.__esModule?function(){return r.default}:function(){return r};return o.d(e,"a",e),e},o.o=function(r,e){return Object.prototype.hasOwnProperty.call(r,e)},o.p="",o(o.s=0)}([function(r,e,o){"use strict";var n=o(1),t=o(5);_rollbarConfig=_rollbarConfig||{},_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||"https://cdn.rollbar.com/rollbarjs/refs/tags/v2.26.2/rollbar.min.js",_rollbarConfig.async=void 0===_rollbarConfig.async||_rollbarConfig.async;var a=n.setupShim(window,_rollbarConfig),l=t(_rollbarConfig);window.rollbar=n.Rollbar,a.loadFull(window,document,!_rollbarConfig.async,_rollbarConfig,l)},function(r,e,o){"use strict";var n=o(2),t=o(3);function a(r){return function(){try{return r.apply(this,arguments)}catch(r){try{console.error("[Rollbar]: Internal error",r)}catch(r){}}}}var l=0;function i(r,e){this.options=r,this._rollbarOldOnError=null;var o=l++;this.shimId=function(){return o},"undefined"!=typeof window&&window._rollbarShims&&(window._rollbarShims[o]={handler:e,messages:[]})}var s=o(4),d=function(r,e){return new i(r,e)},c=function(r){return new s(d,r)};function u(r){return a((function(){var e=this,o=Array.prototype.slice.call(arguments,0),n={shim:e,method:r,args:o,ts:new Date};window._rollbarShims[this.shimId()].messages.push(n)}))}i.prototype.loadFull=function(r,e,o,n,t){var l=!1,i=e.createElement("script"),s=e.getElementsByTagName("script")[0],d=s.parentNode;i.crossOrigin="",i.src=n.rollbarJsUrl,o||(i.async=!0),i.onload=i.onreadystatechange=a((function(){if(!(l||this.readyState&&"loaded"!==this.readyState&&"complete"!==this.readyState)){i.onload=i.onreadystatechange=null;try{d.removeChild(i)}catch(r){}l=!0,function(){var e;if(void 0===r._rollbarDidLoad){e=new Error("rollbar.js did not load");for(var o,n,a,l,i=0;o=r._rollbarShims[i++];)for(o=o.messages||[];n=o.shift();)for(a=n.args||[],i=0;i<a.length;++i)if("function"==typeof(l=a[i])){l(e);break}}"function"==typeof t&&t(e)}()}})),d.insertBefore(i,s)},i.prototype.wrap=function(r,e,o){try{var n;if(n="function"==typeof e?e:function(){return e||{}},"function"!=typeof r)return r;if(r._isWrap)return r;if(!r._rollbar_wrapped&&(r._rollbar_wrapped=function(){o&&"function"==typeof o&&o.apply(this,arguments);try{return r.apply(this,arguments)}catch(o){var e=o;throw e&&("string"==typeof e&&(e=new String(e)),e._rollbarContext=n()||{},e._rollbarContext._wrappedSource=r.toString(),window._rollbarWrappedError=e),e}},r._rollbar_wrapped._isWrap=!0,r.hasOwnProperty))for(var t in r)r.hasOwnProperty(t)&&(r._rollbar_wrapped[t]=r[t]);return r._rollbar_wrapped}catch(e){return r}};for(var p="log,debug,info,warn,warning,error,critical,global,configure,handleUncaughtException,handleAnonymousErrors,handleUnhandledRejection,captureEvent,captureDomContentLoaded,captureLoad".split(","),f=0;f<p.length;++f)i.prototype[p[f]]=u(p[f]);r.exports={setupShim:function(r,e){if(r){var o=e.globalAlias||"Rollbar";if("object"==typeof r[o])return r[o];r._rollbarShims={},r._rollbarWrappedError=null;var l=new c(e);return a((function(){e.captureUncaught&&(l._rollbarOldOnError=r.onerror,n.captureUncaughtExceptions(r,l,!0),e.wrapGlobalEventHandlers&&t(r,l,!0)),e.captureUnhandledRejections&&n.captureUnhandledRejections(r,l,!0);var a=e.autoInstrument;return!1!==e.enabled&&(void 0===a||!0===a||function(r){return!("object"!=typeof r||void 0!==r.page&&!r.page)}(a))&&r.addEventListener&&(r.addEventListener("load",l.captureLoad.bind(l)),r.addEventListener("DOMContentLoaded",l.captureDomContentLoaded.bind(l))),r[o]=l,l}))()}},Rollbar:c}},function(r,e,o){"use strict";function n(r,e,o,n){r._rollbarWrappedError&&(n[4]||(n[4]=r._rollbarWrappedError),n[5]||(n[5]=r._rollbarWrappedError._rollbarContext),r._rollbarWrappedError=null);var t=e.handleUncaughtException.apply(e,n);o&&o.apply(r,n),"anonymous"===t&&(e.anonymousErrorsPending+=1)}r.exports={captureUncaughtExceptions:function(r,e,o){if(r){var t;if("function"==typeof e._rollbarOldOnError)t=e._rollbarOldOnError;else if(r.onerror){for(t=r.onerror;t._rollbarOldOnError;)t=t._rollbarOldOnError;e._rollbarOldOnError=t}e.handleAnonymousErrors();var a=function(){var o=Array.prototype.slice.call(arguments,0);n(r,e,t,o)};o&&(a._rollbarOldOnError=t),r.onerror=a}},captureUnhandledRejections:function(r,e,o){if(r){"function"==typeof r._rollbarURH&&r._rollbarURH.belongsToShim&&r.removeEventListener("unhandledrejection",r._rollbarURH);var n=function(r){var o,n,t;try{o=r.reason}catch(r){o=void 0}try{n=r.promise}catch(r){n="[unhandledrejection] error getting `promise` from event"}try{t=r.detail,!o&&t&&(o=t.reason,n=t.promise)}catch(r){}o||(o="[unhandledrejection] error getting `reason` from event"),e&&e.handleUnhandledRejection&&e.handleUnhandledRejection(o,n)};n.belongsToShim=o,r._rollbarURH=n,r.addEventListener("unhandledrejection",n)}}}},function(r,e,o){"use strict";function n(r,e,o){if(e.hasOwnProperty&&e.hasOwnProperty("addEventListener")){for(var n=e.addEventListener;n._rollbarOldAdd&&n.belongsToShim;)n=n._rollbarOldAdd;var t=function(e,o,t){n.call(this,e,r.wrap(o),t)};t._rollbarOldAdd=n,t.belongsToShim=o,e.addEventListener=t;for(var a=e.removeEventListener;a._rollbarOldRemove&&a.belongsToShim;)a=a._rollbarOldRemove;var l=function(r,e,o){a.call(this,r,e&&e._rollbar_wrapped||e,o)};l._rollbarOldRemove=a,l.belongsToShim=o,e.removeEventListener=l}}r.exports=function(r,e,o){if(r){var t,a,l="EventTarget,Window,Node,ApplicationCache,AudioTrackList,ChannelMergerNode,CryptoOperation,EventSource,FileReader,HTMLUnknownElement,IDBDatabase,IDBRequest,IDBTransaction,KeyOperation,MediaController,MessagePort,ModalWindow,Notification,SVGElementInstance,Screen,TextTrack,TextTrackCue,TextTrackList,WebSocket,WebSocketWorker,Worker,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload".split(",");for(t=0;t<l.length;++t)r[a=l[t]]&&r[a].prototype&&n(e,r[a].prototype,o)}}},function(r,e,o){"use strict";function n(r,e){this.impl=r(e,this),this.options=e,function(r){for(var e=function(r){return function(){var e=Array.prototype.slice.call(arguments,0);if(this.impl[r])return this.impl[r].apply(this.impl,e)}},o="log,debug,info,warn,warning,error,critical,global,configure,handleUncaughtException,handleAnonymousErrors,handleUnhandledRejection,_createItem,wrap,loadFull,shimId,captureEvent,captureDomContentLoaded,captureLoad".split(","),n=0;n<o.length;n++)r[o[n]]=e(o[n])}(n.prototype)}n.prototype._swapAndProcessMessages=function(r,e){var o,n,t;for(this.impl=r(this.options);o=e.shift();)n=o.method,t=o.args,this[n]&&"function"==typeof this[n]&&("captureDomContentLoaded"===n||"captureLoad"===n?this[n].apply(this,[t[0],o.ts]):this[n].apply(this,t));return this},r.exports=n},function(r,e,o){"use strict";r.exports=function(r){return function(e){if(!e&&!window._rollbarInitialized){for(var o,n,t=(r=r||{}).globalAlias||"Rollbar",a=window.rollbar,l=function(r){return new a(r)},i=0;o=window._rollbarShims[i++];)n||(n=o.handler),o.handler._swapAndProcessMessages(l,o.messages);window[t]=n,window._rollbarInitialized=!0}}}}]);
Rollbar.configure({
hostSafeList: ['sportskeeda.com', 'profootballnetwork.com']
});
// End Rollbar Snippet
</script>
<script type="text/javascript">
(function() {
/** CONFIGURATION START **/
var _sf_async_config = window._sf_async_config = (window._sf_async_config || {});
_sf_async_config.uid = 66391;
_sf_async_config.domain = 'profootballnetwork.com';
_sf_async_config.useCanonical = true;
_sf_async_config.useCanonicalDomain = true;
_sf_async_config.authors = 'Betting Staff';
_sf_async_config.sections = 'NFL Betting';
/** CONFIGURATION END **/
function loadChartbeat() {
var e = document.createElement('script');
var n = document.getElementsByTagName('script')[0];
e.type = 'text/javascript';
e.async = true;
e.src = '//static.chartbeat.com/js/chartbeat.js';
n.parentNode.insertBefore(e, n);
}
loadChartbeat();
})();
</script>
<script>
(function() {
var utcToLocalTimeCandidates = $all(".convert-utc-to-local");
function getFormattedDate(dateInstance, format) {
if (format && typeof Date.prototype.format == "function") {
return dateInstance.format(format);
}
return dateInstance.toLocaleDateString();
}
function expandPageTopTextContent() {
var topTextContainer = $(".pfn-content-container .top-text-content-container");
if (topTextContainer) {
topTextContainer.style.height = "unset";
var readMoreBtn = topTextContainer.querySelector(".read-more-content-btn");
if (readMoreBtn) {
addClass(readMoreBtn, "hidden");
}
var readLessBtn = topTextContainer.querySelector(".read-less-content-btn");
if (readLessBtn) {
removeClass(readLessBtn, "hidden");
}
}
}
function shrinkPageTopTextContent() {
var topTextContainer = $(".pfn-content-container .top-text-content-container");
if (topTextContainer) {
topTextContainer.style.height = "116px";
var readMoreBtn = topTextContainer.querySelector(".read-more-content-btn");
if (readMoreBtn) {
removeClass(readMoreBtn, "hidden");
}
var readLessBtn = topTextContainer.querySelector(".read-less-content-btn");
if (readLessBtn) {
addClass(readLessBtn, "hidden");
}
}
}
function init() {
utcToLocalTimeCandidates.forEach(function(dateItem) {
try {
var utcDateTime = dateItem.dataset["utcDateTime"];
var format = dateItem.dataset["format"];
if (utcDateTime) {
var localDate = new Date(utcDateTime);
dateItem.innerText = getFormattedDate(localDate, format);
}
} catch (err) {
console.error(err);
}
});
var topTextContainer = $(".pfn-content-container .top-text-content-container");
if (topTextContainer) {
var readMoreBtn = topTextContainer.querySelector(".read-more-content-btn");
if (readMoreBtn) {
readMoreBtn.addEventListener("click", expandPageTopTextContent);
}
var readLessBtn = topTextContainer.querySelector(".read-less-content-btn");
if (readLessBtn) {
readLessBtn.addEventListener("click", shrinkPageTopTextContent);
}
}
}
init();
})();
</script>
</main>
<div id="taboola-newsroom"></div>
<script type="text/javascript">
window._taboola = window._taboola || [];
_taboola.push({
mode: 'rbox-tracking',
container: 'taboola-newsroom',
placement: 'Newsroom',
});
</script>
<script type="text/javascript">
window._taboola = window._taboola || [];
_taboola.push({
flush: true
});
</script>
<script type="text/javascript">
function getMonthNames() {
return [
"January",
"February",
"March",
"April",
"May",
"June",
"July",
"August",
"September",
"October",
"November",
"December",
];
}
function getShortMonthNames() {
return [
"Jan",
"Feb",
"Mar",
"Apr",
"May",
"Jun",
"Jul",
"Aug",
"Sep",
"Oct",
"Nov",
"Dec",
];
}
function timeTo12HourFormat(time) {
var timeSplit = time.split(":");
var amOrPm = "AM";
var hour = timeSplit[0];
var minute = timeSplit[1];
if (hour >= 12) {
amOrPm = "PM";
}
if (hour > 12) {
hour = hour - 12;
}
return hour + ":" + minute + " " + amOrPm;
}
function getShortDayNames() {
return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
}
function getFullDayNames() {
return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
}
function getFormattedDate(isoDatetime) {
var currentDate = new Date();
var matchDate = new Date(isoDatetime);
var tomorrowDate = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);
var monthNames = getShortMonthNames();
var dayNames = getShortDayNames();
var currentDateString = currentDate.getDate() + '-' + currentDate.getMonth() + '-' + currentDate.getFullYear();
var matchDateString = matchDate.getDate() + '-' + matchDate.getMonth() + '-' + matchDate.getFullYear();
var tomorrowDateString = tomorrowDate.getDate() + '-' + tomorrowDate.getMonth() + '-' + tomorrowDate.getFullYear();
var localTime = matchDate.toLocaleTimeString().replace(/\:\d\d\s/, " ");
var timeZone = matchDate.toString().match(/(\(.*\))/).pop();
return dayNames[matchDate.getDay()] + ", " + matchDate.getDate() + " " + monthNames[matchDate.getMonth()] + " " + matchDate.getFullYear() + ", " + localTime + " " +  timeZone;
}
function timeSince(isoDateString) {
var date = new Date(isoDateString);
var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var seconds = Math.floor((new Date() - date) / 1000);
var interval = Math.floor(seconds / 86400);
if(interval > 6) {
return date.getDate() + " " + monthNames[date.getMonth()] + ", " + date.getFullYear();
}
if (interval > 1) {
return interval + " days ago";
}
if(interval === 1) {
return "1 day ago";
}
interval = Math.floor(seconds / 3600);
if (interval === 1) {
return interval + " hr ago";
}
if (interval > 1) {
return interval + " hrs ago";
}
interval = Math.floor(seconds / 60);
if (interval === 1) {
return "1 min ago";
}
if (interval > 1) {
return interval + " mins ago";
}
return Math.floor(seconds) + " seconds ago";
}
function updateTimeStringsToFormatTimeSince() {
var isPendingContent = window.location.hash === '#pending';
var timeElements = $all('.keeda-time-since');
for (var i = 0; i < timeElements.length; i++) {
var isoDateString = timeElements[i].getAttribute('data-iso-string');
var timeSinceVal = timeSince(isoDateString);
if(timeElements[i].classList.contains("author-post-time") && !timeSinceVal.includes("ago")) {
timeElements[i].innerHTML = "";
} else if (isPendingContent) {
timeElements[i].innerHTML = (timeSinceVal + "<br>(" + isoDateString.split("T")[0] + ")");
} else {
timeElements[i].innerHTML = timeSinceVal;
}
}
}
function getDateObjectInIST() {
var currentTime = new Date();
var currentOffset = currentTime.getTimezoneOffset();
var ISTOffset = 330;   // IST offset UTC +5:30
var ISTTime = new Date(currentTime.getTime() + (ISTOffset + currentOffset) * 60000);
return ISTTime;
}
function getDateInYYYYMMDD(date) {
var d = !date ? getDateObjectInIST() : date;
var month = '' + (d.getMonth() + 1),
day = '' + d.getDate(),
year = d.getFullYear();
if (month.length < 2) month = '0' + month;
if (day.length < 2) day = '0' + day;
return year + "-" + month + "-" + day;
}
function getTimezoneOffsetString(theTime) {
var timezoneMap = {
"420": "PDT",
"360": "MDT",
"300": "CDT",
"240": "EDT",
"180": "GMT-3",
"0": "UTC",
"-60": "BST",
"-120": "CEST",
"-180": "MSK",
"-240": "GMT+4",
"-330": "IST",
"-480": "CST",
"-540": "JST",
"-600": "AEST",
"-720": "NZST"
};
return timezoneMap[theTime.getTimezoneOffset().toString()] || theTime.getTimezoneOffset().toString();
}
function getFriendlyModifiedTime(isoDateString) {
isoDateString = new Date(isoDateString);
var timeOffset = getTimezoneOffsetString(isoDateString);
var friendly_time = isoDateString.toLocaleString('en-US', {
day: 'numeric', 
year: 'numeric', 
month: 'long',
hour: 'numeric', 
minute: 'numeric', 
});
return friendly_time + ' ' + timeOffset;
}
function getAMPMFormattedTime(isoDateString) {
var hours = isoDateString.getHours();
var minutes = isoDateString.getMinutes();
var ampm = hours >= 12 ? 'pm' : 'am';
hours = hours % 12;
hours = hours ? hours : 12;
minutes = minutes < 10 ? '0'+minutes : minutes;
var strTime = hours + ':' + minutes + ' ' + ampm;
return strTime;
}
function getTimeDiffInDaysHoursMinutes(timeInMilliseconds) {
var diffDays = Math.floor(timeInMilliseconds / 86400000); // difference in days
var diffHrs = Math.floor((timeInMilliseconds % 86400000) / 3600000); // difference in hours
var diffMins = Math.round(((timeInMilliseconds % 86400000) % 3600000) / 60000); // difference in minutes
var result = [];
if (diffDays) {
result.push(diffDays + " day(s)");
}
if (diffHrs) {
result.push(diffHrs + " hour(s)");
}
if (diffMins) {
result.push(diffMins + " minute(s)");
}
if (!result.length) {
result.push(Math.round(timeInMilliseconds / 1000) + " second(s)");
}
return result;
}
function getTimeAndDate(isoDateString) {
var isoDateString = new Date(isoDateString);
var monthNames = getShortMonthNames();
var weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var hours = isoDateString.getHours();
if (hours <= 9) {
hours = "0" + hours;
}
var minutes = isoDateString.getMinutes();
if (minutes <= 9) {
minutes = "0" + minutes;
}
return hours + ":" + minutes + ", " + isoDateString.getDate() + " " + monthNames[isoDateString.getMonth()] + " " + isoDateString.getFullYear();
}
function getTimeAndDateFormatted(isoDateString) {
var isoDateString = new Date(isoDateString);
var monthNames = getShortMonthNames();
var weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var hours = isoDateString.getHours();
if (hours <= 9) {
hours = "0" + hours;
}
var minutes = isoDateString.getMinutes();
if (minutes <= 9) {
minutes = "0" + minutes;
}
return isoDateString.getDate() + " " + monthNames[isoDateString.getMonth()] + ", " + isoDateString.getFullYear() + " " + hours + ":" + minutes ;
}
function getFriendlyModifiedTimeWithoutTime(isoDateString) {
isoDateString = new Date(isoDateString);
var friendly_time = isoDateString.toLocaleString('en-US', {
day: 'numeric', 
year: 'numeric', 
month: 'short', 
});
return friendly_time;
}
function convertToETTimezone(date) {
return date.toLocaleString("en-US", {
timeZone: "America/New_York"
});
}
</script>
<script>
/*
* Date Format 1.2.3
* (c) 2007-2009 Steven Levithan <stevenlevithan.com>
* MIT license
*
* Includes enhancements by Scott Trenda <scott.trenda.net>
* and Kris Kowal <cixar.com/~kris.kowal/>
*
* Accepts a date, a mask, or a date and a mask.
* Returns a formatted version of the given date.
* The date defaults to the current date/time.
* The mask defaults to dateFormat.masks.default.
*/
(function() {
var dateFormat = function () {
var	token = /d{1,4}|D{3,4}|m{1,4}|M{3,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
timezoneClip = /[^-+\dA-Z]/g,
pad = function (val, len) {
val = String(val);
len = len || 2;
while (val.length < len) val = "0" + val;
return val;
};
// Regexes and supporting functions are cached through closure
return function (date, mask, utc) {
var dF = dateFormat;
// You can't provide utc if you skip other args (use the "UTC:" mask prefix)
if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
mask = date;
date = undefined;
}
// Passing date through Date applies Date.parse, if necessary
date = date ? new Date(date) : new Date;
if (isNaN(date)) throw SyntaxError("invalid date");
mask = String(dF.masks[mask] || mask || dF.masks["default"]);
// Allow setting the utc argument via the mask
if (mask.slice(0, 4) == "UTC:") {
mask = mask.slice(4);
utc = true;
}
var	_ = utc ? "getUTC" : "get",
d = date[_ + "Date"](),
D = date[_ + "Day"](),
m = date[_ + "Month"](),
y = date[_ + "FullYear"](),
H = date[_ + "Hours"](),
M = date[_ + "Minutes"](),
s = date[_ + "Seconds"](),
L = date[_ + "Milliseconds"](),
o = utc ? 0 : date.getTimezoneOffset(),
flags = {
d:    d,
dd:   pad(d),
ddd:  dF.i18n.dayNames[D],
DDD:  (dF.i18n.dayNames[D]).toUpperCase(),
dddd: dF.i18n.dayNames[D + 7],
DDDD: (dF.i18n.dayNames[D + 7]).toUpperCase(),
m:    m + 1,
mm:   pad(m + 1),
mmm:  dF.i18n.monthNames[m],
MMM:  (dF.i18n.monthNames[m]).toUpperCase(),
mmmm: dF.i18n.monthNames[m + 12],
MMMM: (dF.i18n.monthNames[m + 12]).toUpperCase(),
yy:   String(y).slice(2),
yyyy: y,
h:    H % 12 || 12,
hh:   pad(H % 12 || 12),
H:    H,
HH:   pad(H),
M:    M,
MM:   pad(M),
s:    s,
ss:   pad(s),
l:    pad(L, 3),
L:    pad(L > 99 ? Math.round(L / 10) : L),
t:    H < 12 ? "a"  : "p",
tt:   H < 12 ? "am" : "pm",
T:    H < 12 ? "A"  : "P",
TT:   H < 12 ? "AM" : "PM",
Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
};
return mask.replace(token, function ($0) {
return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
});
};
}();
// Some common format strings
dateFormat.masks = {
"default":      "ddd mmm dd yyyy HH:MM:ss",
shortDate:      "m/d/yy",
mediumDate:     "mmm d, yyyy",
longDate:       "mmmm d, yyyy",
fullDate:       "dddd, mmmm d, yyyy",
shortTime:      "h:MM TT",
mediumTime:     "h:MM:ss TT",
longTime:       "h:MM:ss TT Z",
isoDate:        "yyyy-mm-dd",
isoTime:        "HH:MM:ss",
isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};
// Internationalization strings
dateFormat.i18n = {
dayNames: [
"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
],
monthNames: [
"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
]
};
// For convenience...
Date.prototype.format = function (mask, utc) {
return dateFormat(this, mask, utc);
};
})();
</script>
<script>
var $ = document.querySelector.bind(document);
var $all = document.querySelectorAll.bind(document);
var $id = document.getElementById.bind(document);
(function() {
var carouselContainer = "";
var carouselItemSelector = "";
if ($id("keeda_cricket_widget")) {
carouselContainer = $id("keeda_cricket_widget");
carouselItemSelector = ".keeda_cricket_single_match";
} else if ($id("keeda_football_widget")) {
carouselContainer = $id("keeda_football_widget");
carouselItemSelector = ".keeda_football_single_match";
} else if ($id("keeda_kabaddi_widget")) {
carouselContainer = $id("keeda_kabaddi_widget");
carouselItemSelector = ".keeda_cricket_single_match";
}
if (!carouselItemSelector) {
return;
}
var allScoreCarouselItems = $all(carouselItemSelector);
function init() {
allScoreCarouselItems.forEach(function(item) {
item.addEventListener("click", function(e) {
var closestAnchor = e.target.closest("a");
if (closestAnchor) {
var destinationUrl = closestAnchor.getAttribute("href");
trackGAEvent("SCORE_CAROUSEL_ITEM_CLICK", {
destination_url: destinationUrl
});
}
})
});
trackImpressionGAEventWhenInViewport({
element: carouselContainer,
identifier: "widget_sport_carousel",
eventName: "SCORE_CAROUSEL_IMPRESSION"
});
}
window.addEventListener("DOMContentLoaded", function() {
init();
});
})();
(function() {
var allViewMoreCtas = $all(".view-more-cta");
allViewMoreCtas.forEach(function(cta) {
cta.addEventListener("click", function(e) {
var clickedItem = e.target.closest("a.view-more-cta");
var section = clickedItem.dataset["section"];
var destinationUrl = clickedItem.getAttribute("href");
trackGAEvent("VIEW_MORE_CTA_CLICK", {
section: section,
destination_url: destinationUrl
});
})
});
})();
(function() {
function getFormattedDate(dateInstance, format) {
if (format && typeof Date.prototype.format == "function") {
return dateInstance.format(format);
}
return dateInstance.toLocaleDateString();
}
function init() {
var utcToLocalTimeCandidates = $all(".convert-utc-to-local");
utcToLocalTimeCandidates.forEach(function(dateItem) {
try {
var utcDateTime = dateItem.dataset["utcDateTime"];
var format = dateItem.dataset["format"];
var withUserFriendlyDay = dateItem.dataset["userFriendlyDay"] == "true";
var shouldOutputAsAttribute = dateItem.dataset["asAttribute"] == "true";
var outputAttributeName = dateItem.dataset["outputAttribute"];
if (utcDateTime) {
var localDate = new Date(utcDateTime);
var dateText = "";
if (withUserFriendlyDay) {
var toDateFormat = function(date) {
return [date.getFullYear(), date.getMonth(), date.getDate()].join("-");
}
var localDateFormatted = toDateFormat(localDate);
var today = new Date();
if (toDateFormat(today) == localDateFormatted) {
dateText = "Today";
} else {
var tomorrow = new Date(today);
tomorrow.setDate(today.getDate() + 1);
if (toDateFormat(tomorrow) == localDateFormatted) {
dateText = "Tomorrow";
} else {
dateText = getFormattedDate(localDate, format);
}
}
} else {
dateText = getFormattedDate(localDate, format);
}
if (shouldOutputAsAttribute && outputAttributeName) {
dateItem.setAttribute(outputAttributeName, dateText);
} else {
dateItem.innerText = dateText;
}
}
} catch (err) {
console.error(err);
}
});
}
init();
window.addEventListener("custom:sk:utils:refreshUtcToLocalTime", init);
})();
function NTernary(args) {
for (var i = 0; i < args.length; i++) {
if (args[i]) {
return args[i];
}
}
return false;
}
(function() {
var imageURLCache = {};
function loadImageIfExists(url, imgParams) {
var assetURL = [url, imgParams].join("");
return new Promise(function(resolve, reject) {
var img = new Image();
img.src = assetURL;
img.onload = function() {
resolve(img);
};
img.onerror = function() {
resolve(false);
}
});
}
async function initImg(imgElement) {
var fallbacks = imgElement.dataset["imgFallbacks"];
if (!fallbacks) return;
var imgParams = imgElement.dataset["imgParams"];
var urlsToTry = fallbacks.split("|:|:|");
for await (var url of urlsToTry) {
var urlWithParams = [url, imgParams].join("");
var cachedURL = imageURLCache[urlWithParams];
if (cachedURL) {
imgElement.setAttribute("src", cachedURL);
break;
}
var imageTag = await loadImageIfExists(url, imgParams);
if (imageTag) {
var attributes = imgElement.getAttributeNames();
for (var i = 0; i < attributes.length; i++) {
if (attributes[i] == "src") {
continue;
}
imageTag.setAttribute(attributes[i], imgElement.getAttribute(attributes[i]));
}
imageTag.removeAttribute("data-img-fallbacks");
imgElement.replaceWith(imageTag);
imageURLCache[urlWithParams] = imageTag.getAttribute("src");
break;
}
}
}
function init() {
var observer = new IntersectionObserver(function(entries) {
entries.forEach(function(entry) {
if (!entry.isIntersecting) return;
if (!entry.target) return;
removeClass(entry.target, "img-with-fallbacks");
observer.unobserve(entry.target);
initImg(entry.target);
});
}, {
threshold: 1,
rootMargin: "25% 0px 25% 0px",
});
$all(".img-with-fallbacks").forEach(function(imgElement) {
observer.observe(imgElement);
});
$all(".img-with-fallbacks-eager").forEach(function(imgElement) {
removeClass(imgElement, "img-with-fallbacks-eager");
initImg(imgElement);
});
}
window.addEventListener("DOMContentLoaded", init);
window.addEventListener("custom:sk:utils:lazyLoadAssetImages", init);
})();
(function() {
var playerBasePath = "//staticg.sportskeeda.com/skm/assets/player-images";
var teamBasePath = "//staticg.sportskeeda.com/skm/assets/team-logos";
function generatePathResolver(taxType, assetBasePath) {
return function(taxSlug, categorySlug, fallbackURLs, params) {
var urlsToTry = fallbackURLs.filter(Boolean);
var shouldUseAssetImage = false;
if (taxSlug) {
if (taxType == "player") {
if (["nfl", "college-football", "basketball"].includes(categorySlug)) {
shouldUseAssetImage = true;
}
} else if (taxType == "team") {
shouldUseAssetImage = true;
}
if (shouldUseAssetImage) {
urlsToTry.unshift([assetBasePath, categorySlug, [taxSlug, "png"].join(".")].join("/"));
}
}
urlsToTry = urlsToTry.map(function(url) {
if (params) {
url = url + params;
}
return url;
});
return urlsToTry.join("|:|:|");
}
}
window.generatePlayerAssetImage = generatePathResolver("player", playerBasePath);
window.generateTeamAssetImage = generatePathResolver("team", teamBasePath);
})();
</script>
</body>
</html>
 contentType 24 text/html; charset=utf-8 url 74 https://www.profootballnetwork.com:443/nfl-betting/betting-odds-calculator responseCode 3 200 